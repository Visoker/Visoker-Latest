from keras.datasets import imdb
(train_data,train_labels),(test_data,test_labels)=imdb.load_data(num_words=10000)

max([max(sequence) for sequence in train_data])

word_index=imdb.get_word_index()
reverse_word_index=dict([(value,key)for (key, value) in word_index.items()])
decode_review=' '.join([reverse_word_index.get(i-3,'?') for i in train_data[0]])
decode_review

import numpy as np
def vectorize_sequences(sequences,dimension=10000):
    results=np.zeros((len(sequences),dimension))
    for i,sequence in enumerate(sequences):
        results[i,sequence]=1
    return results
x_train=vectorize_sequences(train_data)
x_test=vectorize_sequences(test_data)

x_train[0]

x_train.shape

y_train=np.asarray(train_labels).astype('float32')
y_test=np.asarray(test_labels).astype('float')




from keras import models
from keras import layers

model=models.Sequential()
model.add(layers.Dense(16,activation='relu',input_shape=(10000,)))
model.add(layers.Dense(16,activation='relu'))
model.add(layers.Dense(1,activation='sigmoid'))




from keras import optimizers
from keras import losses
from keras import metrics
model.complie(optimizer=optimers.RMSprop(lr=0.001),
             loss=losses.binary_crossentropy,
             metrics=[metrics.binary_accuracy])




x_val=x_train[:10000]
practical_x_train=x_train[10000:]

y_val=y_train[:10000]
practical_y_train=y_train[10000:]


history = model.fit(practical_x_train,
                   practical_y_train,
                   epochs=30,
                   batch_size=512,
                   validation_data=(x_val,y_val))


history_dict=history.history
history_dict.keys()


import matplotlib.pyplot as plt
%matplotlib inline


loss_values=history_dict['loss']
val_loss_val=history_dict['val_loss']
epochs=range(1,len(loss_values)+1)
plt.plot(epochs,loss_values,'bo',label="Training Loss")
plt.plot(epochs,val_loss_val,'b',label="Validation Loss")
plt.title('Training and validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss Value')
plt.legend()
plt.show()


np.set_printoptions(suppress=True)
result=model.predict(x_test)

result

y_pred=np.zeros(len(result))
for i, score in enumerate(result):
    y_pred[i]=1 if score > 0.5 else 0


from sklearn.metrics import mean_absolute_error
mae= mean_absolute_error(y_pred , y_test)
mae
