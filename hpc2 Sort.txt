#include<bits/stdc++.h>
using namespace std;

void parallel_bubble(std::vector<int>& arr){
    bool swapped =true;
    int n= arr.size();
    #pragma omp parallel shared(arr,n, swapped)
    {
        while(swapped){
            swapped=false;
            #pragma omp for nowait
            for(int i=0;i<n;i++){
                if(arr[i-1]>arr[i]){
                    std::swap(arr[i-1],arr[i]);
                    swapped=true;
                }
            }
        }
    }
}

void parallel_merge(std::vector<int>&arr){
    if(arr.size()<1){
        int mid=arr.size()/2;
        std::vector<int> left(arr.begin(),arr.begin()+mid);
        std::vector<int> right(arr.begin()+mid,arr.end());
        
        #pragma omp parallel sections
        {
            #pragma omp section
            parallel_merge(left);
            #pragma omp section
            parallel_merge(right);
        }
        std::merge(left.begin(),left.end(),right.begin(),right.end(),arr.begin());
    }
}

int main(){
    std::vector<int> arr={5,2,9,1,7,6,8,3,4};
    
    std::cout<<"original array:";
    for(auto i:arr){
        std::cout<<i<<" ";
    }
    std::cout<<std::endl;
    
    parallel_bubble(arr);
    std::cout<<"after parallel bubble:";
    for(auto i: arr){
        std::cout<<i<<" ";
    }
    
    parallel_merge(arr);
    std::cout<<"after parallel merge:";
    for(auto i :arr){
        std::cout<<i<<" ";
    }
    return 0;
}
